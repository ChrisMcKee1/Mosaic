[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mosaic-workspace"
version = "0.1.0"
description = "Mosaic Workspace - Root configuration for multi-service development"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Chris McKee", email = "chris@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["mcp", "ai", "workspace", "monorepo"]

# No runtime dependencies - this is a workspace configuration only
dependencies = []

[project.optional-dependencies]
# Development tools shared across all services - 2025 optimized
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.9",  # Replaces black, isort, flake8, bandit
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "safety>=3.0.0",
]

# Testing tools shared across all services  
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
]

# Documentation tools
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/ChrisMcKee1/Mosaic"
Documentation = "https://github.com/ChrisMcKee1/Mosaic/blob/main/README.md"
Repository = "https://github.com/ChrisMcKee1/Mosaic"
Issues = "https://github.com/ChrisMcKee1/Mosaic/issues"

# No scripts - each service has its own entry points
[project.scripts]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"mosaic" = ["*.yaml", "*.yml", "*.json", "*.toml"]

# =====================================================================================
# Ruff Configuration - 2025 Optimized Python Code Quality
# Replaces black, isort, flake8, and bandit with unified high-performance tooling
# =====================================================================================

[tool.ruff]
# Project structure and targets
line-length = 88
indent-width = 4
target-version = "py310"

# File discovery and exclusions
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype", 
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.lint]
# Comprehensive rule selection for enterprise Python development
select = [
    # Pyflakes (essential error detection)
    "F",
    # pycodestyle errors and warnings
    "E", "W", 
    # mccabe complexity
    "C90",
    # isort (import sorting)
    "I",
    # pydocstyle (documentation style)
    "D",
    # pyupgrade (syntax updates)
    "UP",
    # flake8-bugbear (likely bugs)
    "B",
    # flake8-simplify (code simplification)
    "SIM",
    # flake8-comprehensions (comprehension improvements)
    "C4",
    # flake8-pie (unnecessary code patterns)
    "PIE",
    # flake8-pytest-style (pytest best practices)
    "PT",
    # flake8-raise (raise statement improvements)
    "RSE",
    # flake8-return (return statement improvements)
    "RET",
    # flake8-self (private member access)
    "SLF",
    # flake8-type-checking (type checking imports)
    "TCH",
    # tryceratops (exception handling)
    "TRY",
    # flake8-use-pathlib (pathlib usage)
    "PTH",
    # pandas-vet (pandas best practices)
    "PD",
    # numpy-specific rules
    "NPY",
    # airflow-specific rules (if applicable)
    "AIR",
    # SECURITY: Bandit rules (S prefix)
    "S",
]

# Rules to ignore (minimal set for flexibility)
ignore = [
    # Allow line length to be handled by formatter
    "E501",
    # Allow TODO comments in development
    "FIX002",
    # Allow missing docstrings in some contexts
    "D100", "D101", "D102", "D103", "D104", "D105", "D107",
    # Allow subprocess calls (handled by bandit security rules)
    "S603", "S607",
    # Allow assert statements in tests
    "S101",
]

# Enable auto-fixing for all fixable rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Per-file ignores for common patterns
[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",    # Allow assert statements in tests
    "D103",    # Allow missing docstrings in tests
    "PLR2004", # Allow magic values in tests
]
"__init__.py" = [
    "F401",    # Allow unused imports in __init__.py
    "D104",    # Allow missing docstrings in __init__.py
]
"scripts/*" = [
    "T201",    # Allow print statements in scripts
]

[tool.ruff.lint.pydocstyle]
# Use Google docstring convention
convention = "google"

[tool.ruff.lint.mccabe]
# Maximum complexity
max-complexity = 10

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.format]
# Formatting configuration (replaces Black)
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

# =====================================================================================
# MyPy Configuration - Enhanced Type Checking for Production Code
# =====================================================================================

[tool.mypy]
# Python version and project structure
python_version = "3.10"
mypy_path = "src"
namespace_packages = true
explicit_package_bases = true

# Error reporting and output
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
color_output = true

# Import discovery and following
follow_imports = "normal"
ignore_missing_imports = false

# Type checking behavior
strict = true

# Strictness overrides (start from strict and selectively relax)
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

# Untyped definitions handling
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

# Optional and None handling
no_implicit_optional = true
strict_optional = true

# Miscellaneous strictness
strict_equality = true
extra_checks = true
disallow_any_generics = true
disallow_subclassing_any = true

# Performance and development
cache_fine_grained = true
local_partial_types = true

# Specific module overrides for third-party libraries
[[tool.mypy.overrides]]
module = [
    "gremlinpython.*",
    "azure.*",
    "semantic_kernel.*", 
    "sse_starlette.*",
    "fastmcp.*",
    "streamlit.*",
    "pyvis.*",
    "plotly.*",
    "networkx.*",
]
ignore_missing_imports = true

# Test files can be less strict
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_calls = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src/mosai-mcp",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "azure: marks tests that require Azure services",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src/mosaic-mcp"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Legacy tool configurations removed - replaced by Ruff unified configuration above